A. 创建模式
 设计模式之Singleton(单态/单件) 阎宏博士讲解：单例（Singleton）模式 保证一个类只有一个实例,并提供一个访问它的全局访问点 
设计模式之Factory(工厂方法和抽象工厂) 使用工厂模式就象使用new一样频繁. 
设计模式之Builder 汽车由车轮 方向盘 发动机很多部件组成，同时，将这些部件组装成汽车也是一件复杂的工作，Builder模式就是将这两种情况分开进行。 
设计模式之Prototype(原型) 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
B. 结构模式 
设计模式之Adapter(适配器) 使用类再生的两个方式:组合(new)和继承(extends),这个已经在thinking in java中提到过. 
设计模式之Proxy(代理) 以Jive为例,剖析代理模式在用户级别授权机制上的应用 设计模式之Facade(门面？) 可扩展的使用JDBC针对不同的数据库编程,Facade提供了一种灵活的实现. 设计模式之Composite(组合) 就是将类用树形结构组合成一个单位.你向别人介绍你是某单位，你是单位中的一个元素，别人和你做买卖，相当于和单位做买卖。文章中还对Jive再进行了剖析。 设计模式之Decorator(装饰器) Decorator是个油漆工,给你的东东的外表刷上美丽的颜色. 设计模式之Bridge(桥连) 将牛郎织女分开(本应在一起,分开他们,形成两个接口),在他们之间搭建一个桥(动态的结合) 设计模式之Flyweight(共享元) 提供Java运行性能,降低小而大量重复的类的开销.
C. 行为模式 设计模式之Command(命令) 什么是将行为封装,Command是最好的说明. 设计模式之Observer(观察者) 介绍如何使用Java API提供的现成Observer 设计模式之Iterator(迭代器) 这个模式已经被整合入Java的Collection.在大多数场合下无需自己制造一个Iterator,只要将对象装入Collection中，直接使用Iterator进行对象遍历。 设计模式之Template(模板方法)
实际上向你介绍了为什么要使用Java 抽象类,该模式原理简单,使用很普遍. 设计模式之Strategy(策略) 不同算法各自封装,用户端可随意挑选需要的算法. 设计模式之Chain of Responsibility(责任链) 各司其职的类串成一串,好象击鼓传花,当然如果自己能完成,就不要推委给下一个. 设计模式之Mediator(中介) Mediator很象十字路口的红绿灯,每个车辆只需和红绿灯交互就可以. 设计模式之State(状态) 状态是编程中经常碰到的实例,将状态对象化,设立状态变换器,便可在状态中轻松切换. 设计模式之Memento(注释状态？) 很简单一个模式,就是在内存中保留原来数据的拷贝. 设计模式之Interpreter(解释器) 主要用来对语言的分析,应用机会不多. 设计模式之Visitor(访问者) 访问者在进行访问时,完成一系列实质性操作,而且还可以扩展.


proxy模式主要用来授权用户对forum的访问,因为访问forum有两种人:一个是注册用户 一个是游客guest,那么那么相应的权限就不一样,而且这个权限是贯穿整个系统的,因此建立一个proxy,类似网关的概念,可以很好的达到这个效果. 

，工厂方法确实为系统结构提供了非常灵活强大的动态扩展机制，只要我们更换一下具体的工厂方法，系统其他地方无需一点变换，就有可能将系统功能进行改头换面的变化。

适配器：我们经常碰到要将两个没有关系的类组合在一起使用
PegAdapter首先继承SquarePeg，然后使用new的组合生成对象方式，生成RoundPeg的对象roundPeg，再重载父类insert()方法。
或者适配器同时实现两个接口

在Java中Prototype原型模式变成clone()方法的使用

当对象很大时，先使用代理对象代替他  proxy  （代替的话一定要继承统一父类或者实现同接口）
总之原则是,对于开销很大的对象,只有在使用它时才创建,这个原则可以为我们节省很多宝贵的Java内存. 所以,有些人认为Java耗费资源内存,我以为这和程序编制思路也有一定的关系.

Facade模式的定义: 为子系统中的一组接口提供一个一致的界面.  Dao类   

如何使用Composite? 首先定义一个接口或抽象类，这是设计模式通用方式了，其他设计模式对接口内部定义限制不多，Composite却有个规定，那就是要在接口内部定义一个用于访问和管理Composite组合体的对象们（或称部件Component）.

Decorator装饰
这些功能需要由用户动态决定加入的方式和时机.Decorator提供了"即插即用"的方法,在运行期间决定何时增加何种功能. 如何使用? 举Adapter中的打桩示例,在Adapter中有两种类:方形桩 圆形桩,Adapter模式展示如何综合使用这两个类,在Decorator模式中,我们是要在打桩时增加一些额外功能,比如,挖坑 在桩上钉木板等,不关心如何使用两个不相关的类.

Bridge模式定义 :将抽象和行为划分开来,各自独立,但能动态的结合。
对象这个概念实际是由属性和行为两个部分组成的，属性我们可以认为是一种静止的，是一种抽象，一般情况下，行为是包含在一个对象中，但是，在有的情况下，我们需要将这些行为也进行归类，形成一个总的行为接口，这就是桥模式的用处。 

Flyweight亨元模式定义:
 避免大量拥有相同内容的小类的开销(如耗费内存),使大家共享一个类(元类).


Command：
 n 将来自客户端的请求传入一个对象，无需了解这个请求激活的动作或有关接受这个请求的处理细节。
类似传统过程语 言的 CallBack功能。


Observer
这就需要在商品product中加入Observer这样角色,以便product细节发生变化时,Observer能自动观察到这种变化,并能进行及时的update或notify动作.

Template模板模式定义:
 定义一个操作中算法的骨架,将一些步骤的执行延迟到其子类中.
也许你以前还疑惑抽象类有什么用,现在你应该彻底明白了吧? 至于这样做的好处,很显然啊,扩展性强,以后Benchmark内容变化,我只要再做一个继承子类就可以,不必修改其他应用代码.

strategy策略
实际整个Strategy的核心部分就是抽象类的使用,使用Strategy模式可以在用户需要变化时,修改量很少,而且快速. Strategy和Factory有一定的类似,Strategy相对简单容易理解,并且可以在运行时刻自由切换。Factory重点是用来创建对象。 Strategy适合下列场合: 1.以不同的格式保存文件; 2.以不同的算法压缩文件; 3.以不同的算法截获图象; 4.以不同的格式输出同样数据的图形,比如曲线 或框图bar等

责任连
CoR 在一个链上,都有相应职责的类,因此叫Chain of Responsibility. CoR


mediator中介模式
为何使用Mediator? 各个对象之间的交互操作非常多;每个对象的行为操作都依赖彼此对方,修改一个对象的行为,同时会涉及到修改很多其他对象的行为,如果使用Mediator模式,可以使各个对象间的耦合松散,只需关心和 Mediator的关系,使多对多的关系变成了一对多的关系,可以降低系统的复杂性,提高可修改扩展性

中介模式
MVC是J2EE的一个基本模式,View Controller是一种Mediator,它是Jsp和服务器上应用程序间的Mediator

state状态模式
在网络游戏中，一个游戏活动存在开始；开玩；正在玩；输赢等各种状态，使用状态模式就可以实现游戏状态的总控，而游戏状态决定了游戏的各个方面，使用状态模式可以对整个游戏架构功能实现起到决定的主导作用。


Memento备望录模式定义: memento是一个保存另外一个对象内部状态拷贝的对象.这样以后就可以将该对象恢复到原先保存的状态.在一个类中操作另一个类


设计模式之Interpreter(解释器) Interpreter解释器模式定义: 定义语言的文法 ,并且建立一个解释器来解释该语言中的句子

Visitor访问者模式定义 作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作. 在Java中,Visitor模式实际上是分离了collection结构中的元素和对这些元素进行操作的行为.



针对接口编程
接口是一系列方法的声明，是一些方法特征的集合，一个接口只有方法的特征没有方法的实现，因此 这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为(功能)。
针对接口编程又称为面向接口编程，针对接口编程就是要先设计一系列的接口，把设计和实现分离开，使用时只需引用接口即可，也由于系统各部分的解耦合。
针对接口编程是未来提高程序的可维护性、可伸缩性和可复用性。如果你在一个类中直接使用另外的一个，这样就把两个类紧密的联系在了一起，以后如果想做出改变就很难了。如果针对接口编程，当业务变化时我们只需要用一个新的类实现接口即可，而客户端依旧可以使用接口引用新的类的，同时也保证了客户端的不变性。这样客户端和实现端互不影响，保持了各自的相对独立性。

单一职责原则
单一职责原则(Single Responsibility Principle ):就一个类而言，应该仅有一个引起它变化的原因。换句话说，一个类的功能要单一，只做与它相关的事情。如果一个完成额外的不太相关的功能或者完成其它类的功能，这就会使得一个引起一个类变化的因素太多，如果类的一处需要修改，其它和它相关连的代码都会受到影响，这就直接导致一旦系统出现了问题就难以调试困境，同时这样也非常不利于维护。
遵循单一职责原则也会给测试带来极大的方便。
违背单一职责原则会降低类的内聚性、增强类的耦合性。现在软件开发的经典模式MVC模式，也非常好的体现了单一职责原则。MVC(Model-View-Control)就是模型、视图、控制器三层架构模式，其中M是指数据模型、V是指用户界面、C则是控制器。采用MVC模式使得数据和表现相分离，同一个数据层可以有不同的显示层。数据层和显示层的改变互不影响。这就非常有利于提高软件的可维护性和可复用性，同时也方便了软件的管理工作和提高软件开发效率。
MVC基本的处理流程如下： 用户与视图交互，视图接受并反馈用户的动作；视图把用户的请求传给相应的控制器，有控制器决定调用哪个模型，然后由模型调用相应的业务逻辑对用户的请求进行加工处理，如果需要返回数据，模型会把相应的数据返回给控制，由控制器调用相应的视图，最终由视图格式化和渲染返回的数据，以一种对用户尽可能友好的方式展现给用户。

开放封闭原则
开放封闭原则(Open-Closed Principle)：一个软件实体应当对扩展开放，则修改关闭。对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况；对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。如何做到开放封闭原则呢？答案是：封装变化，依赖接口和抽象类，而不要依赖具体实现类。要针对接口和抽象类编程，不要针对具体实现编程。因为接口和抽象类是稳定的，他们是一种对客户端的一种承诺，是相对不变的。如果以后需要扩展或者开发新的功能，只需要实现或者继承接口或者抽象类即可覆盖或者扩展新的功能，这样做同时也不回影响新的功能。这就很好的做到了对扩展开放、对修改关闭。
实际上讲，绝对封闭的系统式不存在的。无论我们怎么保持封闭，一个系统总会有要变化的地方，“世界上没有一个不边的软件”、“需求总是在改变”。我们要做的不是消灭变化，而是把变化隔离开来，并对其进行封装。我们无法控制变化，但是我们可以预则哪里会发生变法。把要变化的地方抽象起来，这样以后再面临变化的时候我们就可以尽量的扩展，而无须改变以后的代码。

里氏代换原则
里氏代换原则（Liskov Substitution Principle）是指：一个软件实体如果使用的是基类的话，那么也一定适用于其子类，而且它根本觉察不错使用的是基类对象还是子类对象；反过来的代换这是不成立的，即：如果一个软件实体使用一个类的子类对象，那么它不能够适用于基类对象。在Java中如果子类覆盖了基类的方法，子类是该方法的访问权限必须是不能低于它在父类中的访问权限的。这样在才能保证在客户端程序调用父类相应方法而需要使用子类的相应的方法代替时（调用父类的方法时需要使用子类相应的方法是普遍的），不会因为子类的方法降低了访问权限而导致客户端不能在继续调用。
温馨提示：
里氏代换原则是很多其它设计模式的基础。
它和开放封闭原则的联系尤其紧密。违背了里氏代换原则就一定不符合开放封闭原则。

迪米特法则
迪米特法则(Law of Demeter，简写LoD )又叫做最少知识原则（LeastKnowledge Principle 简写LKP），也就是说，一个对象应当对其他对象尽可能少的了解，不和陌生人说话。迪米特法则(Law of Demeter，简写LoD )又叫做最少知识原则（LeastKnowledge Principle 简写LKP），也就是说，一个对象应当对其他对象尽可能少的了解，不和陌生人说话。

合成聚合复用原则
合成聚合复用原则（Composite Aggregate Reuse Principle,简称为CARP）经常又被人们称为合成复用原则（Composite Reuse Principle,简称为CRP）.合成聚合复用原则是指在一个新的对象中使用原来已经存在的一些对象，是这些原来已经存在的对象称为新对象的一部分，新的对象通过向这些原来已经具有的对象委派相应的动作或者命令达到复用已有功能的目的。
合成复用原则跟简洁的表述是：要尽量使用合成和聚合，尽量不要使用继承
类似接口注入
























































